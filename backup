#! /usr/bin/env python3.2
import sys, argparse, time, datetime
import notify2, os, signal, shutil, subprocess
import getpass, keyring
import configparser
from backuplib import *
#from backupgui import BackupGUI

#hier = ['hourly','daily','weekly','monthly']
#retain = [24,7,4,12]
#WD_dir = '/media/Backups/snapshots/'
#root_exclusions = ['/home/kevin/.local/share/Trash/','*/*cache*','*/*wine*','*/*windows/','/dev','/proc','/mnt','/sys','/media','/run','/Windows','/home/kevin/.config/chromium','/home/kevin/.macromedia','*/*Cache*','/home/kevin/.dolphin-emu']
#logf1 = '/home/kevin/.log'
#logf2 = '/home/kevin/.logall'

#==============================================================================================================================================

def notification(string,icon):
	n = notify2.Notification("Backup",string,icon)
	n.set_urgency(notify2.URGENCY_CRITICAL)
	n.show()
	return

def onexit():
	notification('The backup has encountered a fatal encounter and has been forced to exit. Check the logfile for further details.','dialog-error')
	exit()

def execute(cmd,sudo):
	print(cmd)
	if sudo:
		print(getpass.getuser())
		password= subprocess.Popen(['echo',keyring.get_password('Backup',getpass.getuser())],stdout=subprocess.PIPE)
		process = subprocess.Popen(cmd, stdin = password.stdout, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	else:
		process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	
#	nextline = str(process.stdout.readline())
#	while True:
#		nextline = str(process.stdout.readline())
#		if nextline == '' and process.poll() != None: break
#		sys.stdout.write(nextline)

	output = process.communicate()[0]
	returncode = process.returncode
	print(output.decode(),end='\n')

	if (returncode == 0): return ''
	else: raise ProcessError(cmd, returncode, output)

def rsync(source,back_dir,log,su,excludes=[]):
	for src in source:
		log.log('Syncing: ' + src)
		params = []
		params += '/usr/bin/rsync -avvx --numeric-ids --relative --delete --delete-excluded'.split(' ')
		for exclude in excludes: params.append('--exclude='+exclude)
		params.append(src)
		params.append(back_dir+'hourly.00/')

		try:
			print(execute(params,su))
		except ProcessError as e:
			log.log('ERROR: could not execute {0}: exited with return code {1}.\n\t{2}'.format(e.cmd,e.returncode,e.output))
	return

def name_strip(name,direc,log):
	try: files = os.listdir(direc)
	except OSError as e:
		log.log('ERROR: Could not list files in {0}. Error number {1}.\n\t{2}'.format(e.filename,e.errno,e.strerror))
		onexit()
	else:
		cyc = []
		for n in files:
			if name in n:
				time = n[len(name)+1:]
				try: time = int(time)
				except ValueError: log.log('Could not convert ' + n + ' to integer; skipped.')
				else: cyc.append(time)
		return sorted(cyc,reverse=True)

#===============================================================================================================================================#
#===============================================================================================================================================#
#                                                                                                                                               #
#                                                                                                                                               #
#                                                                                                                                               #
#===============================================================================================================================================#
#===============================================================================================================================================#

def cycle(hierarchy,loc,retention,source,back_dir,log,sudo,to_exclude=[]):
	log.log('Staring backup...')
	if loc >= len(hierarchy) or loc < 0:
		log.log('Error in running parameters.')
		log.log(hierarchy); log.log(loc); log.log(retention)
		return

	last = 0
	try:
		log.log('Reading history file...')
		f = open(back_dir+'.hist','r+')
		hist = f.readlines()
		f.close()
		last = int(hist[loc].strip())
	except IOError as e:
		log.log('ERROR: Could not read history file ({0}).\n\t{1}'.format(e.errno, e.strerror))
	except ValueError:
		log.log('Error reading history file: incorrect input for integer.')

	else:
		log.log(str(last) +' ' + hierarchy[loc] + ' backups.')
		if last == retention[loc] and loc < len(hierarchy)-1:
			log.log('Retention reached; moving one step up the hierarchy.')
			hist[loc] = '0'
			with open(back_dir+'.hist','w') as f:
				for l in hist: f.write(l.strip() + '\n')
			cycle(hierarchy,loc+1,retention,source,back_dir,log,to_exclude)
		else:
			names = name_strip(hierarchy[loc],back_dir,log)
			if 00 in names:
				if note > 1:
					notification('Cycling backups up...','dialog-info')
				log.log('Renaming files...')
				for name in names:
					fro = back_dir+hierarchy[loc]+'.'+str(name).zfill(2)+'/'
					to = back_dir+hierarchy[loc]+'.'+str(name+1).zfill(2)+'/'
					moving = ['/bin/mv',fro, to]
					try: print(execute(moving,sudo))
					except ProcessError as e:
						log.log('ERROR: Could not cycle backups. Command {0} failed with code {1}.\n{2}'.format(e.cmd,e.returncode,e.output))
						onexit()

			if hierarchy[loc] == 'hourly':
				if note > 1:
					notification('Copying newest backup directory...','dialog-info')

				log.log('Preparing new backup directory...')
				if os.path.exists(back_dir+'hourly.'+str(retention[loc]).zfill(2)):
					try: print(execute(['/bin/mv', back_dir+'hourly.'+str(retention[loc]-1).zfill(2),back_dir+'hourly.00'],sudo))
					except ProcessError as e:
						log.log('ERROR: Moving old backup failed: exited with return code {0}.\n{1}'.format(e.returncode,e.output))
					else: log.log('Backup moved successfully.')

				elif os.path.exists(back_dir+'hourly.01'):
					log.log('Good to go! Copying now.')
					copying = ['/bin/cp','-val',back_dir+'hourly.01',back_dir+'hourly.00']
					try:
						print(execute(copying,sudo))
					except ProcessError as e:
						log.log('ERROR: Copying backup failed: exited with return code {0}.\n\t{1}'.format(e.returncode,e.output))

				else:
					log.log('Creating new backup directory...')

				if note > 1:
					notification('Executing rsync...','dialog-info')

				rsync(source,back_dir,log,sudo,to_exclude)

				if os.path.exists(back_dir+'hourly.00'):
					log.log('rsync executed successfully.')
				else:
					log.log('ERROR: rsync was not successful.')
					try: os.mkdir(back_dir+'hourly.00')
					except OSError: log.log('ERROR: could not create empty dir; next backup will fail.')
					notification('rsync failed; please correct any errors manually.','dialog-error')
			else:
				if note > 1:
					notification('Copying latest ' + hierarchy[loc-1] + ' backup...','dialog-info')
				log.log('Using most recent backup from one step down...')
				if os.path.exists(back_dir+hierarchy[loc-1]+'.'+str(retention[loc-1]-1).zfill(2)):
					log.log('Renaming backup...')
					try: execute(['mv',back_dir+hierarchy[loc-1]+'.'+str(retention[loc-1]-1).zfill(2),back_dir+hierarchy[loc]+'.00'])
					except ProcessError as e:
						log.log('ERROR: could not cycle new ' + hierarchy[loc] +\
						' backup ({0}): {1} failed.\n\t{2}'.format(e.returncode,e.cmd,e.output))
						notification('Unable to cycle backups; please correct any errors manually.','dialog-error')

			if os.path.exists(back_dir+hierarchy[loc]+'.'+str(retention[loc]).zfill(2)):
				if note > 1:
					notification('Removing old backups...','dialog-info')
				log.log('Removing old backups...')
				try: shutil.rmtree(back_dir+hierarchy[loc]+'.'+str(retention[loc]).zfill(2))
				except OSError as e:
					log.log('ERROR: Could not remove {0} ({1}).\n\t{2}'.format(e.filename,e.errno,e.strerror))
					notification('Unable to remove old backup; please delete manually.','dialog-error')

			hist[loc] = str(last+1)

			with open(back_dir+'.hist','w') as f:
				for l in hist: f.write(l.strip() + '\n')
	return

#==============================================================================================================================================

notify2.init('Backup')

parser = argparse.ArgumentParser()
parser.add_argument('action',action='store')

config = configparser.ConfigParser()
if config.read(['/etc/backup.conf']) != ['/etc/backup.conf']:
	if input('Could not read backup configuration file! Would you like to create one (yes/no)?') not in ['yes','Yes','y','Y']:
		print('Exiting...')
		exit()
		#gui = BackupGUI()
		#gui.start()
		
action = parser.parse_args(sys.argv[1:]).__dict__['action']
WD_dir = config.get('backup','directory')
t = int(float(config.get('backup','time')))
sup = config.get('backup','super') in ['True','true']
note = int(float(config.get('backup','verbosity')))
logf1 = config.get('backup','shortlog')
logf2 = config.get('backup','longlog')
struc = config.items('retain')
hier = [a[0] for a in struc]
retain = [int(float(a[1])) for a in struc]
root_exclusions = [a[1] for a in config.items('exclusions')]

log = logger(logf1, logf2)
clobber = clobber(['/run/backup.pid','/tmp/backup.pid'],'/var/lock/backup.lock',log)
#gui = BackupGUI('/etc/backup.conf',clobber,log)

try: os.remove(logf2)
except OSError as e: log.log("Couldn't remove last log2 file.\n{0}".format(e.strerror))
log.log(str(datetime.datetime.now()))

sys.stdout = log
sys.stderr = log

if action in hier:
	#gui.confirm(action,t,WD_dir)
	print('Quitting for test purposes...')
	cycle(hier,hier.index(action),retain,['/'],WD_dir,log,sup,root_exclusions)

elif action == 'edit':
	#gui.start()
	exit()

elif action == 'test':
	log.log('testing...')
	#gui.confirm(action,t,WD_dir)
	cycle(hier,0,[4,2,2,2],['/home/kevin/test/'],'/media/Backups/test/',log,sup,['*/*wine*','*/*windows*'])

elif action == 'kill':
	log.log('killing...')
#	if os.path.exists('/tmp/backup.pid'):
	if clobber.exists():
		try:
			os.kill(clobber.get(),signal.SIGHUP)
		except OSError as e: log.log('ERROR: could not kill process.')
		log.log('success?')
		notification('The pending backup has been cancelled.','dialog-info')
		exit()
	elif clobber.locked():#os.path.exists('/tmp/backup_lock.pid'):
		notification('Backup is already in progress. Please do not interrupt the process.','dialog-warning')
		exit()
	else:
		notification('No backup in progress. Are you sure one is running?','dialog-question')
		log.log('Process not found.')
		exit()

else:
	log.log(str(sys.argv))
	log.log('Invalid option.')
	exit()

notification(action.title() + " backup is complete.",'dialog-info')
try: clobber.remove()#os.remove('/tmp/backup_lock.pid')
except OSError as e: log.log('ERROR: Could not remove lockfile {0} ({1}).\n\t{2}'.format(e.filename,e.errno,e.strerror))
